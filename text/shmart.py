from typing import List, Tuple
import re

rules_def: List[Tuple[str, str]] = [
    ('\'', ''),
    ('”', '"'),
    ('„', '"'),
    ('–', '-'),
    ('—', '-'),
    ('...', '…'),
    ('»', '"'),
    ('«', '"'),
    ('odziem', 'od_ziem'),
    ('ęzis', 'ęz_is'),
    ('arzn', 'ar_zn'),
    ('arzł', 'ar_zł'),
    ('asilo', 'as_ilo'),
    (' tarzan', ' tar_zan'),
    ('mierzi', 'mier_zi'),
    ('zinte', 'z_inte'),
    ('hunter', 'hanter'),
    (' bruce', ' brus'),
    (' hulk', ' halk'),
    ('she-hulk', 'szi-halk'),
    ('lady-hulk', 'lejdi-halk'),
    ('girl-hulk', 'gerl-halk'),
    (' walter', ' łolter'),
    (' steve', ' stiw'),
    (' roger', ' rodżer'),
    ('jennifer', 'dżenifer'),
    (' jen ', ' dżen '),
    (' yen ', ' jen '),
    ('cheetos', 'czitos'),
    (' holiway', 'holiłej'),
    (' blonsky', 'blonski'),
    ('carring', 'karing'),
    ('izaac', 'izaak'),
    ('sprite', 'sprajt'),
    ('avonlea', 'avonli'),
    (' chubb', 'czab'),
    (' nigel', ' najdżel'),
    ('lady pauline', 'lejdi polin'),
    (' jerome', ' dżerom'),
    ('rodney', 'rodnyj'),
    ('morgarath', 'morgaraf'),
    (' horace', ' horys'),
    (' mount ', ' maunt '),
    ('beethoven', 'betoven'),
    ('mozart', 'mocart'),
    (' howard', ' hałard'),
    (' clara', ' klara'),
    (' duncan', ' dankan'),
    (' hackham', ' hakam'),
    ('slipsunder', 'slipsander'),
    (' george', 'dżordż'),
    (' sir ', ' ser '),
    (' jenny', ' dżeny'),
    (' rosie ', ' roz_i '),
    (' melanie ', ' melani '),
    (' caldwell ', ' kaldłel '),
    (' kitty ', ' ki_ti '),
    (' sarah ', ' sara '),
    (' cushing ', ' kaszing '),
    (' chandler ', ' czendler '),
    (' newport ', ' niuport '),
    (' david ', ' dejwid '),
    (' fielding ', ' filding '),
    ('antoinette', 'antłanet'),
    ('wallace', 'łoles'),
    ('permettez-moi', 'per-me-te-mła'),
    ('carter', 'karter'),
    ('cordom', 'kordom'),
    ('wensley', 'łenzli'),
    ('casting', 'kasting'),
    ('klermont', 'klermąn'),
    ('melbourne', 'melbern'),
    ('shirley', 'szirlij'),
    (' alice', ' alis'),
    ('auschwitz', 'ałszwic'),
    ('beethoven', 'betowen'),
    ('benjamin', 'bendżamin'),
    ('birmingham', 'birmingam'),
    ('bismarck', 'bismark'),
    (' blake', ' blejk'),
    ('brewster', 'bruster'),
    ('brooklyn', 'bruklin'),
    (' brown', ' brałn'),
    (' bush', ' busz'),
    (' carlos', ' karlos'),
    (' carson', ' karson'),
    (' carter', ' karter'),
    ('catalina', ' katalina'),
    ('charles', 'czarls'),
    ('charlie', 'czarli'),
    ('charlotte', 'szarlot'),
    (' chase', ' czejs'),
    ('chelsea', 'czels_i'),
    (' chopin', ' szopen'),
    (' colorado', ' kolorado'),
    (' columb', ' kolumb'),
    ('connor', 'konor'),
    ('conrad', 'konrad'),
    ('crusoe', 'kruzo'),
    (' duncan', ' dankan'),
    ('eiffla', 'ajfla'),
    ('everest', 'ewrest'),
    ('facebook', 'fejsbuk'),
    (' federic', ' federik'),
    (' freya', ' freja'),
    (' gray', ' grej'),
    ('greenwich', 'grinłicz'),
    (' grey', ' grej'),
    ('isabel', 'izabel'),
    ('jacob', ' dżejkob'),
    (' james', ' dżejms'),
    (' jeremy', ' dżeremi'),
    (' jenkins', ' dżenkins'),
    (' jim', ' dżim'),
    (' joe ', ' dżo '),
    (' john', ' dżon'),
    (' justin', ' dżastin'),
    ('liverpool', 'liwerpul'),
    ('lorraine', 'loren'),
    (' louis', ' lu_łiz'),
    (' lucy ', ' lus_i '),
    ('malcolm', 'malkolm'),
    ('massachusetts', 'masaczjusets'),
    (' michael', ' majkel'),
    ('microsoft', 'majkrosoft'),
    (' mike', ' majk'),
    (' miles', ' majls'),
    (' mount', ' małnt'),
    (' movie', ' muwi'),
    (' murphy', ' merfi'),
    (' nicol', ' nikol'),
    (' owen', ' ołen'),
    (' pierre', ' pier'),
    ('requiem', 'rekfiem'),
    (' richard', ' riczard'),
    (' schubert', ' szubert'),
    (' schwartz', ' szwarc'),
    (' scotland', ' skotland'),
    (' schroeder', ' szreder'),
    (' schlesinger', ' szlezinger'),
    (' scott', ' skot'),
    ('siergiej', 'sjergiej'),
    (' skype', ' skajp'),
    (' spice', ' spajs'),
    (' steal ', ' stil '),
    (' stephen', ' stiwen'),
    (' steven', ' stiwen'),
    (' stuart', ' stju_art'),
    (' tequil', ' tekil'),
    (' tracy', ' trejs_i'),
    (' train', ' trejn'),
    (' true ', ' tru '),
    (' victor', ' wiktor'),
    (' wells', ' łels'),
    (' william', ' łyliam'),
    (' wilson', ' łylson'),
    (' world', ' łerld'),
    ('sawyer', ' sojer'),
    ('manhattan', 'manhatan'),
    ('morningside', 'morningsajd'),
    ('highway', 'hajłej'),
    (' frau ', ' frał '),
    ('deutsche', 'dojcze'),
    ('strauss', 'sztrałs'),
    ('rozenthal', 'rozental'),
    ('louis', 'lułis'),
    ('hollywood', 'holiłud'),
    (' madame ', ' madam '),
    ('steel', 'stil'),
    ('dashwood', 'daszłud'),
    ('middleton', 'midlton'),
    ('street', 'strit'),
    ('jennings', 'dżenings'),
    ('temple ', 'templ'),
    ('t-shirt', 'tiszert'),
    ('smith', 'smif'),
    ('thatcher', 'taczer'),
    ('cardiff', 'kardif'),
    ('cardiff', 'kardif'),
    (' hill ', ' hil '),
    ('douglas', 'daglas'),
    
    # (' ', ''),
    # (' ', ''),
    ('x', 'ks'),
    ('sh', 'sz'),
    ('zż', 'z-ż'),
    ('rż', 'r-ż'),
    ('ww', 'w_w'),
]
    
def gen_rule(rule_tuple: Tuple[str, str]) -> Tuple[re.Pattern, str]:
    from_rule, to_rule = rule_tuple
    prefix, suffix = False, False
    
    from_rule = from_rule.replace('.', '\\.')

    if from_rule[0] == ' ':
        prefix = True
    
    if from_rule[-1] == ' ':
        suffix = True
    
    _prefix = '([ \,\.\;\!\:\?]|^)' if prefix else ''
    _suffix = '([ \,\.\;\!\:\?]|$)' if suffix else ''

    _from_rule = (f'{_prefix}{from_rule.strip()}{_suffix}')

    _to_prefix = '\g<1>' if _prefix != '' else ''
    _to_suffix = '\g<1>' if _prefix == '' and _suffix != '' else '\g<2>' if _suffix != '' else ''

    _to_rule = (f'{_to_prefix}{to_rule.strip()}{_to_suffix}')

    return re.compile(_from_rule), _to_rule

rules = [*map(gen_rule, rules_def)]

prelower_rules = [
    ('GLKiH', 'Gie eL Ka i Ha'),
    ('Red Mount', 'Red Małnt'),
    ('Will', 'Łil'),
    ('Andy', 'Endi'),
    ('Trump', 'Tramp'),
    ('Fieldstone', 'Fildston'),
    ('West Side', 'Łest Sajd'),
    ('Hudson', 'Hadson'),
    ('Hofmeister', 'Hofmajster'),
    ('Lucy ', 'Lusi '),
    ('Lady ', 'Lejdi '),
    ('Marianne ', 'Marian '),
    ('Cleveland', 'Kliwlend'),
    ('Willoughby', 'Łilołbi'),
    ('Jake ', 'Dżejk '),
    ('Jessie', 'Dżes_i'),
    ('Andrews', 'Endrjus'),
    ('Doug ', 'Dag '),
    ('Craig', 'Krejg'),
    ('Sophie', 'Sofi'),
    ('Carlit', 'Karlit'),
    ('Joe', 'Dżo'),
    ('Kate', 'Kejt'),
    ('Oate', 'Ołen'),
    ('Maisy', 'Mejz_i'),
]

rules2 = [*map(gen_rule, prelower_rules)]

def shmart_replace(text: str) -> str:
    for _, (rule_from, rule_to) in enumerate(rules2):
        text = rule_from.sub(rule_to, text)

    text = text[1:] if text[0] == '-' else text
    text = text.lower()

    for _, (rule_from, rule_to) in enumerate(rules):
        text = rule_from.sub(rule_to, text)
    
    return text